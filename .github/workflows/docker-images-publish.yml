name: Publish (AMD64, ARM64)

on:
  workflow_dispatch:  
  workflow_call:

jobs:
  build_amd64:
    uses: ./.github/workflows/docker-amd64-build.yml

  build_arm64:
    uses: ./.github/workflows/docker-arm64-build.yml

  publish:
    needs: [build_amd64, build_arm64]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository      
        uses: actions/checkout@v4

      - name: Download AMD64 Image
        uses: actions/download-artifact@v4
        with:
          name: terminusdb-server-snapshot-amd64

      - name: Download AMR64 Image
        uses: actions/download-artifact@v4
        with:
          name: terminusdb-server-snapshot-arm64

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: terminusdb
          password: ${{ secrets.DOCKER_PASS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Load and push AMD64 images
        run: |
          # Build regular and noroot for amd64
          docker load < terminusdb-server-snapshot-amd64.tar.gz
          docker tag terminusdb/terminusdb-server:local terminusdb/terminusdb-server:dev-amd64-$GITHUB_SHA
          docker push terminusdb/terminusdb-server:dev-amd64-$GITHUB_SHA
          docker build -t terminusdb/terminusdb-server:dev-amd64-noroot-$GITHUB_SHA docker/no-root
          docker push terminusdb/terminusdb-server:dev-amd64-noroot-$GITHUB_SHA
          docker rmi terminusdb/terminusdb-server:local
          # Build regular and noroot for arm64
          docker load < terminusdb-server-snapshot-arm64.tar.gz
          docker tag terminusdb/terminusdb-server:local terminusdb/terminusdb-server:dev-arm64-$GITHUB_SHA
          docker push terminusdb/terminusdb-server:dev-arm64-$GITHUB_SHA
          # Since this is a standard ubuntu-latest, we have to emulate with buildx...
          docker buildx build --platform linux/arm64 \
            --build-arg BASE_IMAGE=terminusdb/terminusdb-server:dev-arm64-$GITHUB_SHA \
            --tag terminusdb/terminusdb-server:dev-arm64-noroot-$GITHUB_SHA \
            --push docker/no-root
          docker rmi terminusdb/terminusdb-server:local

      - name: Determine image tags to push
        run: |
          # Extract version from GITHUB_REF (e.g., refs/heads/main or refs/tags/v1.2.3)        
          VERSION=$(echo "$GITHUB_REF" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `dev` tag convention for the main branch
          if [ "$VERSION" == "main" ]; then
            VERSION="dev"
          fi

          # Image identifiers
          LOCAL_IMAGE=terminusdb/terminusdb-server:local
          VERSION_IMAGE=terminusdb/terminusdb-server:$VERSION
          DEV_COMMIT_IMAGE=terminusdb/terminusdb-server:$VERSION-$GITHUB_SHA
          LATEST_IMAGE=terminusdb/terminusdb-server:latest

          TAGS="$VERSION_IMAGE"

          if [ "$VERSION" == "dev" ]; then
            TAGS="${TAGS},${DEV_COMMIT_IMAGE}"
          fi

          # Tag and push the latest image when a version tag is pushed
          # Exclude pre-release versions (anything with a suffix like -rc, -beta, -alpha, -dev)
          if echo "$GITHUB_REF" | grep -q "refs/tags/v" && ! echo "$VERSION" | grep -qE "-(rc|beta|alpha|dev)"; then
            # Get the major version from the version (e.g., v11 from v11.0.4)
            VERSION_MAJOR=$(echo "$VERSION" | cut -d '.' -f 1)
            TAGS="${TAGS},${LATEST_IMAGE},terminusdb/terminusdb-server:${VERSION_MAJOR}"
          fi

          # Set the tags as an environment variable
          echo "docker_tags=${TAGS}" >> $GITHUB_ENV
          
          # Also create noroot tags
          NOROOT_TAGS="${VERSION}-noroot"
          if [ "$VERSION" == "dev" ]; then
            NOROOT_TAGS="${NOROOT_TAGS},${VERSION}-noroot-$GITHUB_SHA"
          fi
          if echo "$GITHUB_REF" | grep -q "refs/tags/v" && ! echo "$VERSION" | grep -qE "-(rc|beta|alpha|dev)"; then
            VERSION_MAJOR=$(echo "$VERSION" | cut -d '.' -f 1)
            NOROOT_TAGS="${NOROOT_TAGS},latest-noroot,${VERSION_MAJOR}-noroot"
          fi
          echo "noroot_tags=${NOROOT_TAGS}" >> $GITHUB_ENV

      - name: Create multi-arch image manifests
        run: |
          # Create manifests for standard images
          TAGS="${{ env.docker_tags }}"
          for TAG in ${TAGS//,/ }
          do
              docker buildx imagetools create -t $TAG terminusdb/terminusdb-server:dev-amd64-$GITHUB_SHA terminusdb/terminusdb-server:dev-arm64-$GITHUB_SHA
          done
          
          # Create manifests for noroot images
          NOROOT_TAGS="${{ env.noroot_tags }}"
          for TAG in ${NOROOT_TAGS//,/ }
          do
              docker buildx imagetools create -t terminusdb/terminusdb-server:$TAG terminusdb/terminusdb-server:dev-amd64-noroot-$GITHUB_SHA terminusdb/terminusdb-server:dev-arm64-noroot-$GITHUB_SHA
          done

  trigger_enterprise_build:
    name: Trigger enterprise build
    runs-on: ubuntu-latest
    needs: publish
    if: |
      github.repository == 'terminusdb/terminusdb' &&
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main'

    steps:
      - name: Run
        run: |
          curl https://api.github.com/repos/${{ secrets.ENTERPRISE_REPO_OWNER }}/${{ secrets.ENTERPRISE_REPO }}/dispatches \
            -X POST \
            -H 'Accept: application/vnd.github.everest-preview+json' \
            -u rrooij:${{ secrets.PAT }} -d '{ "event_type": "Trigger from community", "client_payload": {"commit": "${{ github.sha }}" } }'

  trigger_docs_update:
    name: Trigger docs update
    runs-on: ubuntu-latest
    needs: publish
    if: >-
      github.repository == 'terminusdb/terminusdb' &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT }}
          repository: terminusdb/terminusdb-docs
          event-type: update-from-terminusdb
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
