name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  LAST_RELEASED_VERSION: 11.1.12
  CURRENT_REPO_VERSION: 11.1.13

jobs:
  openapi_lint:
    name: OpenAPI linting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - run: npx @redocly/cli lint docs/openapi.yaml


  is_duplicate_run:
    name: Duplicate run?
    runs-on: ubuntu-latest

    outputs:
      duplicate_run: ${{ steps.check_skip.outputs.should_skip }}

    steps:
      - uses: fkirc/skip-duplicate-actions@master
        id: check_skip
        with:
          # Skip a concurrent run triggered by a pull_request event if there is
          # already a run triggered by a push event.
          concurrent_skipping: same_content_newer
          # Cancel runs from outdated commits.
          cancel_others: 'true'
          # Do not skip push events. They are used by the push_docker job.
          do_not_skip: '["push", "workflow_dispatch", "schedule"]'

  is_build_required:
    name: Build required?
    runs-on: ubuntu-latest

    outputs:
      build_required: ${{ steps.filter.outputs.change_other_than_docs_alone }}
      push_docker_required: >-
        ${{
          github.repository == 'terminusdb/terminusdb' &&
          github.event_name == 'push' && (
            github.ref == 'refs/heads/main' ||
            github.ref == 'refs/heads/add_vectorlink' ||
            startsWith(github.ref, 'refs/tags/v')
          )
        }}

    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            change_other_than_docs_alone:
              - '!(**.md|docs/**|LICENSE)'

  versions:
    name: Versions
    runs-on: ubuntu-latest
    needs:
      - is_duplicate_run
      - is_build_required
    # Build if we need to push a Docker image or there is no duplicate run in
    # progress and a build is required due to changed files.
    if: |
      needs.is_build_required.outputs.push_docker_required == 'true' || (
        needs.is_duplicate_run.outputs.duplicate_run == 'false' &&
        needs.is_build_required.outputs.build_required == 'true'
      )

    steps:
      - uses: actions/checkout@v3

      - name: Run Cog to update versions in files
        run: |
          pip install cogapp
          cog -v
          cog -r \
            -D LAST_RELEASED_VERSION=$LAST_RELEASED_VERSION \
            -D CURRENT_REPO_VERSION=$CURRENT_REPO_VERSION \
            docs/release-steps.md \
            src/config/terminus_config.pl \
            distribution/snap/snapcraft.yaml

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update versions
          file_pattern: >-
            docs/release-steps.md
            src/config/terminus_config.pl
            distribution/snap/snapcraft.yaml

  build:
    name: Build
    needs: versions
    uses: ./.github/workflows/build.yml

  arm64_docker:
    name: Trigger arm64 build
    needs:
      - is_build_required
    uses: ./.github/workflows/arm.yml
    if: needs.is_build_required.outputs.push_docker_required == 'true'

  check:
    name: Check
    needs: build
    uses: ./.github/workflows/check.yml
    with:
      test_repository: ${{ github.repository }}
      test_ref: ${{ github.sha }}

 # This is required for status checks.
  all_checks_pass_with_build:
    name: All checks pass
    runs-on: ubuntu-latest
    needs: check
    steps:
      - run: echo "Celebrate! ðŸ¥³"

  docs:
    name: Update docs
    runs-on: ubuntu-latest
    needs: all_checks_pass_with_build
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: terminusdb-server-docker-image

      - name: Generate man page
        run: |
          sudo apt-get install --no-install-recommends ronn
          ronn --version
          docker load < terminusdb-server-docker-image.tar.gz
          export HELP="$(docker run --rm terminusdb/terminusdb-server:local /app/terminusdb/terminusdb help -m)"
          envsubst < docs/terminusdb.1.ronn.template > docs/terminusdb.1.ronn
          ronn --roff docs/terminusdb.1.ronn

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update man page
          file_pattern: docs/terminusdb.1.*

  # This is required for status checks.
  all_checks_pass_without_build:
    name: All checks pass
    runs-on: ubuntu-latest
    needs: is_build_required
    if: >
      needs.is_build_required.outputs.build_required == 'false' &&
      needs.is_build_required.outputs.push_docker_required == 'false'
    steps:
      - run: echo "Nothing to be done. ðŸ˜Œ"

  push_docker:
    name: Push Docker image
    runs-on: ubuntu-latest
    needs:
      - is_build_required
      - all_checks_pass_with_build
      - arm64_docker
    if: needs.is_build_required.outputs.push_docker_required == 'true'

    steps:
      - uses: actions/checkout@v3

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: terminusdb-server-docker-image

      - name: Download Docker image arm64
        uses: actions/download-artifact@v3
        with:
          name: terminusdb-server-docker-image-arm64

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: terminusdb
          password: ${{ secrets.DOCKER_PASS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Load images
        run: |
          docker load < terminusdb-server-docker-image.tar.gz
          docker tag terminusdb/terminusdb-server:local terminusdb/terminusdb-server:dev-amd64-$GITHUB_SHA
          docker push terminusdb/terminusdb-server:dev-amd64-$GITHUB_SHA
          docker rmi terminusdb/terminusdb-server:local
          docker load < terminusdb-server-docker-image-arm64.tar.gz
          docker tag terminusdb/terminusdb-server:local terminusdb/terminusdb-server:dev-arm64-$GITHUB_SHA
          docker push terminusdb/terminusdb-server:dev-arm64-$GITHUB_SHA
          docker rmi terminusdb/terminusdb-server:local

      - name: Determine image tags to push
        run: |
          VERSION=$(echo "$GITHUB_REF" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `dev` tag convention for main branch
          [ "$VERSION" == "main" ] && VERSION=dev

          # Image identifiers
          LOCAL_IMAGE=terminusdb/terminusdb-server:local
          VERSION_IMAGE=terminusdb/terminusdb-server:$VERSION
          DEV_COMMIT_IMAGE=terminusdb/terminusdb-server:$VERSION-$GITHUB_SHA
          LATEST_IMAGE=terminusdb/terminusdb-server:latest

          TAGS="$VERSION_IMAGE"

          if [ "$VERSION" == "dev" ]; then
            TAGS="${TAGS},${DEV_COMMIT_IMAGE}"
          fi

          # Tag and push the latest image when a version tag is pushed
          # We also make sure that rc and beta are not pushed to the latest tag!
          if [ $(echo "$GITHUB_REF" | grep "refs/tags/v" | grep -v "rc" | grep -v "beta") ]; then
            # Get the major tag, for instance v11 if the version is v11.0.4
            VERSION_MAJOR=$(echo "$VERSION" | cut -d '.' -f 1)
            TAGS="${TAGS},${LATEST_IMAGE},terminusdb/terminusdb-server:${VERSION_MAJOR}"
          fi

          echo "docker_tags=${TAGS}" >> $GITHUB_ENV

      - name: Create new image manifest
        run: |
          TAGS="${{ env.docker_tags }}"
          for TAG in ${TAGS//,/ }
          do
              docker buildx imagetools create -t $TAG terminusdb/terminusdb-server:dev-amd64-$GITHUB_SHA terminusdb/terminusdb-server:dev-arm64-$GITHUB_SHA
          done

  trigger_enterprise_build:
    name: Trigger enterprise build
    runs-on: ubuntu-latest
    needs: push_docker
    if: |
      github.repository == 'terminusdb/terminusdb' &&
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main'

    steps:
      - name: Run
        run: |
          curl https://api.github.com/repos/${{ secrets.ENTERPRISE_REPO_OWNER }}/${{ secrets.ENTERPRISE_REPO }}/dispatches \
            -X POST \
            -H 'Accept: application/vnd.github.everest-preview+json' \
            -u rrooij:${{ secrets.PAT }} -d '{ "event_type": "Trigger from community", "client_payload": {"commit": "${{ github.sha }}" } }'

  trigger_snap:
    name: Trigger snap build
    if: >-
      github.repository == 'terminusdb/terminusdb' &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')
    needs:
      - is_build_required
      - all_checks_pass_with_build
    uses: ./.github/workflows/snap.yml

  release_snap:
    name: Release the build snap
    needs: trigger_snap
    runs-on: ubuntu-latest

    steps:
      - name: Download Snap image
        uses: actions/download-artifact@v3
        with:
          name: terminusdb-snap
          path: download_snap/
      - name: Determine exact snap path
        id: snap_path_step
        run: echo "::set-output name=snap_path::$(find download_snap -name '*.snap')"
      - uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAP_STORE_LOGIN }}
        with:
          snap: ${{ steps.snap_path_step.outputs.snap_path }}
          release: stable

  trigger_docs_update:
    name: Trigger docs update
    runs-on: ubuntu-latest
    needs: push_docker
    if: >-
      github.repository == 'terminusdb/terminusdb' &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT }}
          repository: terminusdb/terminusdb-docs
          event-type: update-from-terminusdb
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
