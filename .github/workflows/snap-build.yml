# Build Snap
name: Snap Build

on:
  workflow_dispatch:
  workflow_call:
  pull_request:
    paths:
      - ".github/workflows/snap-build.yml"
  
env:
  NODE_VERSION: '20'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    outputs:
      snap: ${{ steps.snapcraft.outputs.snap }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy Sources
        run: rsync -r ./ distribution/terminusdb_source/

      - name: Build
        uses: snapcore/action-build@v1
        id: snapcraft
        with:
          path: distribution

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: terminusdb-snap
          path: ${{ steps.snapcraft.outputs.snap }}
        
  test:
    name: Integration Tests
    needs: 
      - build
    runs-on: ubuntu-latest
    
    env:
      # Standard snap user data directory (guaranteed writable by snap)
      TERMINUSDB_SERVER_DB_PATH: /home/runner/snap/terminusdb/common/storage
      TERMINUSDB_SERVER_NAME: 127.0.0.1
      TERMINUSDB_SERVER_PORT: 6363
      TERMINUSDB_ADMIN_PASS: root
      TERMINUSDB_EXEC_PATH: /snap/bin/terminusdb
      TERMINUSDB_BASE_URL: http://127.0.0.1:6363

    steps:   
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download
        uses: actions/download-artifact@v4
        with:
          name: terminusdb-snap
          path: download_snap/

      - name: Install Snap
        run: |
          # Classic confinement snaps need --classic flag
          sudo snap install download_snap/*.snap --dangerous --classic
          
          # Show snap status
          snap list terminusdb
          snap connections terminusdb
          
          echo "NOTE: Running in classic mode (no confinement)"
          
          # Debug: Check SWI-Prolog version in snap
          echo "=== Checking SWI-Prolog version in snap ==="
          ls -la /snap/terminusdb/current/usr/lib/swi-prolog/ || echo "SWI-Prolog directory not found"
          
          # Check for library files
          echo "=== Checking for libswipl.so ==="
          find /snap/terminusdb/current -name "libswipl.so*" -ls || echo "No libswipl.so found"
          
          # Try to determine version from file dates
          echo "=== SWI-Prolog boot.prc timestamp ==="
          ls -l /snap/terminusdb/current/usr/lib/swi-prolog/boot.prc 2>/dev/null || echo "No boot.prc found"
          
          # Check what architecture
          echo "=== Architecture ==="
          uname -m
          
          # Try running terminusdb --version
          echo "=== TerminusDB version ==="
          terminusdb --version || echo "Failed to run terminusdb"

      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Init TerminusDB
        run: |
            # Create storage directory
            mkdir -p "$TERMINUSDB_SERVER_DB_PATH"
            
            terminusdb store init --key root
  
      - name: Start TerminusDB
        run: |
            # Capture server logs to a file
            terminusdb serve > terminusdb-server.log 2>&1 &
            echo $! > terminusdb.pid
            
            # Show where logs are being written
            echo "Server logs: $(pwd)/terminusdb-server.log"
            
            # Give server a moment to start writing logs
            sleep 2
            echo "Initial server output:"
            head -20 terminusdb-server.log || echo "No output yet"
            
            # Wait for server AND database storage to be fully ready
            echo "Waiting for TerminusDB to be ready..."
            TEST_DB="healthcheck-test"
            
            for i in {1..120}; do
              # First check: Basic HTTP (no auth)
              if ! curl -sf http://127.0.0.1:6363/ > /dev/null 2>&1; then
                if [ $((i % 10)) -eq 0 ]; then
                  echo "Still waiting for HTTP server... ($i/120 seconds)"
                fi
                sleep 1
                continue
              fi
              
              # Second check: API with auth
              if ! curl -sf -u admin:root http://127.0.0.1:6363/api/ok > /dev/null 2>&1; then
                if [ $((i % 10)) -eq 0 ]; then
                  echo "HTTP up, waiting for authentication... ($i/120 seconds)"
                  # Show what the server is saying
                  curl -v http://127.0.0.1:6363/api/ok 2>&1 | head -15
                fi
                sleep 1
                continue
              fi
              
              # Third check: Can list databases (read operation)
              if ! curl -sf -u admin:root http://127.0.0.1:6363/api/db/admin > /dev/null 2>&1; then
                if [ $((i % 10)) -eq 0 ]; then
                  echo "Auth OK, waiting for storage read capability... ($i/120 seconds)"
                  # Show the actual error
                  curl -v -u admin:root http://127.0.0.1:6363/api/db/admin 2>&1 | head -20
                fi
                sleep 1
                continue
              fi
              
              # Third check: Can create a database (write operation)
              # This ensures full storage layer initialization
              if curl -sf -u admin:root -X POST \
                   -H "Content-Type: application/json" \
                   -d '{"label":"Health Check","comment":""}' \
                   http://127.0.0.1:6363/api/db/admin/$TEST_DB > /dev/null 2>&1; then
                echo "TerminusDB fully ready (API + read + write) after $i seconds"
                # Clean up test database
                curl -sf -u admin:root -X DELETE \
                     http://127.0.0.1:6363/api/db/admin/$TEST_DB > /dev/null 2>&1 || true
                break
              fi
              
              if [ $i -eq 30 ]; then
                echo "ERROR: TerminusDB failed to fully initialize after 120 seconds"
                echo "Trying to fetch any available logs..."
                cat /var/snap/terminusdb/common/terminusdb.log 2>/dev/null || echo "No log file found"
                echo "Testing basic HTTP response:"
                curl -v http://127.0.0.1:6363/ || true
                echo ""
                echo "Testing /api/ok:"
                curl -v -u admin:root http://127.0.0.1:6363/api/ok || true
                echo ""
                echo "Testing database list (read):"
                curl -v -u admin:root http://127.0.0.1:6363/api/db/admin || true
                echo ""
                echo "Testing database create (write):"
                curl -v -u admin:root -X POST \
                     -H "Content-Type: application/json" \
                     -d '{"label":"Health Check","comment":""}' \
                     http://127.0.0.1:6363/api/db/admin/$TEST_DB || true
                exit 1
              fi
              
              if [ $((i % 10)) -eq 0 ]; then
                echo "Storage read OK, waiting for write capability... ($i/30 seconds)"
              fi
              sleep 1
            done
            
            # Additional stability wait
            echo "Waiting 10 more seconds for full stability..."
            sleep 10
            
            # Show server logs before tests to see any errors
            echo ""
            echo "=== Server logs before tests (last 50 lines) ==="
            tail -150 terminusdb-server.log || echo "No log file yet"
  
      - name: Test
        run: cd tests && npm i && npm run test
        
      - name: Show TerminusDB Logs on Failure
        if: failure()
        run: |
          echo "=== TerminusDB Server Logs ==="
          if [ -f terminusdb-server.log ]; then
            echo "Log file found at: $(pwd)/terminusdb-server.log"
            echo "Log file size: $(wc -l < terminusdb-server.log) lines"
            echo ""
            echo "--- Server Log Contents ---"
            cat terminusdb-server.log
          else
            echo "ERROR: Log file not found at $(pwd)/terminusdb-server.log"
            echo "Looking for log files..."
            find . -name "*.log" -type f 2>/dev/null || true
          fi
          echo ""
          echo "=== Snap Logs ==="
          sudo snap logs terminusdb || true
          echo ""
          echo "=== AppArmor Denials (snap confinement issues) ==="
          sudo dmesg | grep -i apparmor | grep -i terminusdb | tail -50 || echo "No AppArmor denials found in dmesg"
          echo ""
          sudo journalctl -b | grep -i apparmor | grep -i terminusdb | tail -50 || echo "No AppArmor denials found in journal"
          echo ""
          echo "=== Snap Confinement Mode ==="
          snap debug confinement || true
          echo ""
          echo "=== TerminusDB Process Status ==="
          ps aux | grep terminusdb || true
          echo ""
          echo "=== Snap Info ==="
          snap list terminusdb || true
          snap connections terminusdb || true
          echo ""
          echo "=== Binaries ==="
          ls -la /snap/bin/terminusdb || true
          ls -la /snap/terminusdb/x1/terminusdb || true
          file /snap/terminusdb/x1/terminusdb || true
          echo ""
          echo "=== Environment Variables ==="
          env | grep TERMINUSDB || true
          echo ""
          echo "=== Storage Directory ==="
          ls -la /home/runner/snap/terminusdb/common/ || true
          ls -la /home/runner/snap/terminusdb/common/storage/ || true
          echo ""
          echo "=== Test Connection ==="
          curl -v -u admin:root http://127.0.0.1:6363/api/ || true
          echo ""
          echo "=== Test Database List ==="
          curl -v -u admin:root http://127.0.0.1:6363/api/db/admin || true

      - name: Stop TerminusDB
        if: always()
        run: |
          kill $(cat terminusdb.pid) || true      
        
