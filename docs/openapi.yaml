openapi: 3.0.1
info:
  title: TerminusDB API
  description: API for TerminusDB
  contact:
    email: team@terminusdb.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 10.0.3
externalDocs:
  description: Find out more about TerminusDB
  url: https://terminusdb.org
servers:
- url: http://localhost:6363/api
security:
- basicAuth: []
tags:
- name: TerminusDB
  description: Everything about TerminusDB
  externalDocs:
    description: Find out more
    url: https://terminusdb.org
paths:
  /:
    get:
      x-python-client: Client::get_databases
      x-js-client: Client.getDatabases
      tags:
        - Connection
      summary: Get a list of databases for the authenticated user
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Database'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /info:
    get:
      x-python-client: not_implemented
      x-js-client: Client.info
      tags:
        - Connection
      summary: Get information about the TerminusDB version
      responses:
        200:
          description: succesful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    example: api:InfoResponse
                  "api:info":
                    type: object
                    properties:
                      "authority":
                        type: string
                        example: "terminusdb://system/data/User/admin"
                      "storage":
                        type: object
                        properties:
                          "version":
                            type: string
                            example: "1"
                      "terminusdb":
                        type: object
                        properties:
                          "version":
                            type: string
                            example: "10.0.13"
                      "terminusdb_store":
                        type: object
                        properties:
                          "version":
                            type: string
                            example: "0.19.5"
                  "api:status":
                    type: string
                    example: api:success
  /ok:
    get:
      x-python-client: not_implemented
      x-js-client: not_implemented
      tags:
        - Connection
      summary: Simple status update
      responses:
        200:
          description: Succeeded
  /db:
    get:
      x-python-client: Client::get_databases
      x-js-client: Client.getDatabases
      tags:
        - Database
      summary: List details of all databases available to the authorized user.
      parameters:
        - name: branches
          in: query
          description: Return branches or not
          required: false
          schema:
            type: boolean
            default: false
        - name: verbose
          in: query
          description: Return all available information
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Database listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        404:
          description: database not found
          content:
            application/json:
              schema:
                type: object

  /db/{organization}/{database}:
    get:
      x-python-client: Client::get_database
      x-js-client: not_implemented
      tags:
        - Database
      summary: List details of the database under the given organization.
      parameters:
        - $ref: '#/components/parameters/organization'
        - $ref: '#/components/parameters/database'
        - name: branches
          in: query
          description: Return branches or not
          required: false
          schema:
            type: boolean
            default: false
        - name: verbose
          in: query
          description: Return all available information
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Database listing
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Database'

        404:
          description: Database not found
          content:
            application/json:
              schema:
                type: object
    head:
      x-python-client: Client::has_database
      x-js-client: Client.hasDatabase
      tags:
        - Database
      summary: Check that a db exists
      parameters:
        - $ref: '#/components/parameters/organization'
        - $ref: '#/components/parameters/database'
      responses:
        200:
          description: Database exists
          content:
            application/json:
              schema:
                type: object
        404:
          description: Database not found
          content:
            application/json:
              schema:
                type: object

    post:
      x-python-client: Client::create_database
      x-js-client: Client.createDatabase
      tags:
        - Database
      summary: Create a database
      parameters:
        - $ref: '#/components/parameters/organization'
        - $ref: '#/components/parameters/database'
      requestBody: # TODO: Missing prefixes
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: A sample comment for my database
                label:
                  type: string
                  example: Testdatabase
                public:
                  type: boolean
                  example: false
                  description: Should the database be accessible for all users?
                schema:
                  type: boolean
                  example: true
                  description: Should the database be initialized with a schema?
              required:
                - comment
                - label
      responses:
        200:
          description: Added database
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    example: api:DbCreateResponse
                  "api:status":
                    type: string
                    example: api:success
        400:
          description: Database already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    example: api:DbCreateErrorResponse
                  "api:error":
                    type: object
                    properties:
                      "@type":
                        type: string
                        example: api:DatabaseAlreadyExists
                      "api:database_name":
                        type: string
                        example: MyNewAlreadyExistingDatabase
                      "api:organization_name":
                        type: string
                        example: admin
                  "api:message":
                    type: string
                    example: Database already exists.
                  "api:status":
                    type: string
                    example: api:failure

        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      x-python-client: Client::delete_database
      x-js-client: Client.deleteDatabase
      tags:
        - Database
      summary: Delete a database
      parameters:
        - $ref: '#/components/parameters/organization'
        - $ref: '#/components/parameters/database'
        - name: force
          in: query
          description: Force database to be delete (useful for databases in inconsistent states)
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Succesfully deleted DB
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    example: api:DbDeleteResponse
                  "api:status":
                    type: string
                    example: api:success
        403:
          description: Forbidden
        404:
          description: Can't find DB
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    example: api:DbDeleteErrorResponse
                  "api:error":
                    type: object
                    properties:
                      "@type":
                        type: string
                        example: api:UnknownDatabase
                      "api:database_name":
                        type: string
                        example: MyNonExistingDatabase
                      "api:organization_name":
                        type: string
                        example: admin
    put:
      x-python-client: not_implemented
      x-js-client: Client.updateDatabase
      tags:
        - Database
      summary: Change qualities of a database (label, comment, etc.)
      parameters:
        - $ref: '#/components/parameters/organization'
        - $ref: '#/components/parameters/database'
      requestBody: # TODO: Missing prefixes
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: A sample comment for my database
                label:
                  type: string
                  example: Testdatabase
                public:
                  type: boolean
                  example: false
                  description: Should the database be accessible for all users?
                schema:
                  type: boolean
                  example: true
                  description: Should the database be initialized with a schema?
              required:
                - comment
                - label
      responses:
        200:
          description: Updated database
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    example: api:DbUpdatedResponse
                  "api:status":
                    type: string
                    example: api:success
        404:
          description: Database not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    example: api:DbUpdateErrorResponse
                  "api:error":
                    type: object
                    properties:
                      "@type":
                        type: string
                        example: api:UnknownDatabase
                      "api:database_name":
                        type: string
                        example: MyNonExistingDatabase
                      "api:organization_name":
                        type: string
                        example: admin
                  "api:message":
                    type: string
                    example: "Unknown database: admin/MyNonExistingDatabase"
                  "api:status":
                    type: string
                    example: api:not_found
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: Forbidden

  /document/{path}:
    get:
      x-python-client: Client::get_document
      x-js-client: Client.getDocument
      tags:
        - Document
      summary: Get a document
      description: 'This endpoint is also usable through a POST with the header `X-HTTP-Method-Override: GET` submitted. This allows you to submit a JSON query document as post data instead of as query parameters. This can be useful for cases where your query parameters would be too long otherwise, or if you already have your data as JSON. In particular, this is useful for the `ids` field, which in the POST-ed query document can be submitted as a JSON list directly.'
      parameters:
        - $ref: '#/components/parameters/resource_path'
        - $ref: '#/components/parameters/graph_type'
        - name: skip
          in: query
          description: Skip a certain amount of documents
          required: false
          schema:
            type: integer
            default: 0
        - name: count
          in: query
          description: Number of documents to retrieve
          required: false
          schema:
            type: integer
            example: 3
        - name: minimized
          in: query
          description: Minify the output
          required: false
          schema:
            type: boolean
            default: true
        - name: as_list
          in: query
          description: Return the JSONs as list instead of as a json stream
          required: false
          schema:
            type: boolean
            default: false
        - name: unfold
          in: query
          description: Unfold the documents (join other referenced documents)
          schema:
            type: boolean
            default: true
        - name: id
          in: query
          required: false
          description: Specific document ID to look for (takes precedence over ids field)
          schema:
            type: string
            example: Person/Robin_1991-02-01
        - name: ids
          in: query
          required: false
          description: Multiple document IDs to look for, as a json list (EXPERIMENTAL)
          schema:
            type: string
            example: Person/Robin_1991-02-01
        - name: type
          in: query
          required: false
          description: Get documents of only a specific type
          schema:
            type: string
            example: Person
        - name: compress_ids
          in: query
          required: false
          description: Whether to compress all ids using prefixes
          schema:
            type: boolean
            default: true

      responses:
        200:
          description: List or stream of documents
          content:
            application/json:
              schema:
                type: object
                description: Concatenated list of JSON documents
                example: {"@id":"Organization/admin", "@type":"Organization", "database": ["SystemDatabase/system", "UserDatabase/60c35164e937174bbf4dd814c78153d660edc55b3d799c534c1e2d872a3d2dd6" ], "name":"admin"}

    post:
      x-python-client: Client::insert_document
      x-js-client: Client.addDocument
      tags:
        - Document
      summary: Insert a new document
      parameters:
        - $ref: '#/components/parameters/resource_path'
        - $ref: '#/components/parameters/author'
        - $ref: '#/components/parameters/message'
        - $ref: '#/components/parameters/graph_type'
        - name: full_replace
          in: query
          required: false
          description: Replace the existing data in the graph with the submitted documents. All existing data will be deleted.
          schema:
            type: boolean
            default: false
        - name: raw_json
          in: query
          required: false
          description: Whether to interpret the posted document as arbitrary untyped JSON
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Succesfully added documents
          content:
            application/json:
              schema:
                type: object
                description: Added documents

    delete:
      x-python-client: Client::delete_document
      x-js-client: Client.deleteDocument
      tags:
        - Document
      summary: Delete one or multiple documents
      parameters:
        - $ref: '#/components/parameters/resource_path'
        - $ref: '#/components/parameters/author'
        - $ref: '#/components/parameters/message'
        - $ref: '#/components/parameters/graph_type'
        - name: nuke
          in: query
          description: Remove all data from the graph
          schema:
            type: boolean
            default: false
        - name: id
          in: query
          description: ID of document
          schema:
            type: string
            example: Person/Bert
      responses:
        200:
          description: Succesfully deleted document(s)
          # TODO: Need the proper JSON resposne!
    put:
      x-python-client: Client::replace_document
      x-js-client: Client.updateDocument
      tags:
        - Document
      summary: Replace a document
      parameters:
        - $ref: '#/components/parameters/resource_path'
        - $ref: '#/components/parameters/author'
        - $ref: '#/components/parameters/message'
        - $ref: '#/components/parameters/graph_type'
        - name: create
          in: query
          description: Create a document if it does not exist
          required: false
          schema:
            type: boolean
            default: false
        - name: raw_json
          in: query
          description: Treat incoming document as raw json (not type checked)
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Succesfully replaced documents
  /schema/{path}:
    get:
      x-python-client: Client::get_class_frame
      x-js-client: Client.getSchemaFrame
      tags:
        - Frame
      summary: Get the full class frame for a class or all classes for a schema
      parameters:
        - name: path
          description: Path to a specific data product
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: query
          required: false
          description: Class type to get specific frame for
          schema:
            type: string
        - name: compress_ids
          in: query
          description: Compress the URLs returned using prefixes
          required: false
          schema:
            type: boolean
            default: true
        - name: expand_abstract
          in: query
          description: Whether to expand abstract classes into lists of concrete classes in frame options
          required: false
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: Class Frame, or object of all class frames has been successfully returned
          content:
            application/json:
              schema:
                type: object
              examples:
                OneClass:
                  value: { "@documentation": { "@comment":"A normal user database.","@properties": { "comment":"A comment associated with the database.", "creation_date":"The time of creation of the database.", "label":"The label name of the database.", "state":"The system transaction state of the database."} }, "@key": {"@type":"Random"}, "@type":"Class", "comment":"xsd:string", "creation_date":"xsd:dateTime","label":"xsd:string","name":"xsd:string","state": {"@id":"DatabaseState","@type":"Enum","@values": ["creating", "deleting", "finalized" ]}}
                AllClasses:
                  value: { "@context": { "@base":"terminusdb:///data/", "@schema":"terminusdb:///schema#", "@type":"Context" }, "Person": {"@type":"Class", "name":"xsd:string"}, "Room": {"@type":"Class", "room_number":"xsd:integer"} }
  /woql:
    post:
      summary: Execute a WOQL query
      x-python-client: not_implemented
      x-js-client: not_implemented
      tags:
        - WOQL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WoqlQuery'
      responses:
        200:
          description: Query result
  /woql/{path}:
    post:
      summary: Execute a WOQL query on a specific path
      x-python-client: Client::query
      x-js-client: Client.query
      tags:
        - WOQL
      parameters:
        - name: path
          description: Database Path
          in: path
          required: true
          schema:
            type: string
            example: admin/foo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WoqlQuery'
      responses:
        200:
          description: Query result
  /clone/{organization}/{database}:
    post:
      summary: Clone a database
      x-python-client: Client::clonedb
      x-js-client: Client.clonedb
      tags:
        - Collaboration
      parameters:
        - $ref: '#/components/parameters/organization'
        - $ref: '#/components/parameters/database'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
                - label
                - remote_url
              properties:
                comment:
                  type: string
                  example: This is a comment on my cloned database
                  description: The comment to use in the cloned database
                label:
                  type: string
                  example: This is how I label my cloned database
                  description: The label to use for the cloned database
                remote_url:
                  type: string
                  example: 'http://cloud.terminusdb.com/TerminatorsX/TerminatorsX/nuclear'
                  description: The URL of the database to clone
                public:
                  type: boolean
                  description: Whether to make the newly cloned database public
      responses:
        200:
          description: Database cloned succesfully
          content:
            application/json:
              schema:
                type: object
  /fetch/{path}:
    post:
      x-python-client: Client::fetch
      x-js-client: Client.fetch
      tags:
        - Collaboration
      summary: Fetch the remote repository for the given path (default is origin)
      parameters:
        - $ref: '#/components/parameters/branch_path'
        - name: AUTHORIZATION_REMOTE
          in: header
          required: true
          description: The authorization to use on the remote
          schema:
            type: string
            example: Basic S2FybEthdXRza3k6cGFzc3dvcmRfZGVzdGluYXRpb24=
      responses:
        200:
          description: "Successful fetch"
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type:":
                    type: string
                    enum:
                      - "api:FetchRequest"
                  "api:status":
                    type: string
                    enum:
                      - "api:success"
                  "api:head_has_changed":
                    type: boolean
                  "api:head":
                    type: string
                    example: 194822f8942286517e151817d38acca4c9ac7d01
  /push/{path}:
    post:
      x-python-client: Client::push
      x-js-client: Client.push
      summary: Push the branch to the remote
      tags:
        - Collaboration
      parameters:
        - $ref: '#/components/parameters/branch_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - remote
                - remote_branch
              properties:
                remote:
                  type: string
                  example: origin
                  description: The name of the remote to push to
                remote_branch:
                  type: string
                  example: main
                  description: The name of the branch on the remote to push
                push_prefixes:
                  type: boolean
                  default: false
                  description: Should the prefixes also be pushed to the remote?
      responses:
        200:
          description: "Push Response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - "api:PushResponse"
                  "api:repo_head_updated":
                    type: boolean
                  "api:repo_head":
                    type: string
                    example: 194822f8942286517e151817d38acca4c9ac7d01
                  "api:status":
                    type: string
                    enum:
                      - "api:success"
        400:
          description: "Push Response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - "api:PushErrorResponse"
                  "api:error":
                    type: object
                  "api:message":
                    type: string
                    example: "Unknown remote repository: porridgen"
                  "api:status":
                    type: string
                    enum:
                      - "api:failure"

  /pull/{path}:
    post:
      x-python-client: Client::pull
      x-js-client: Client.pull
      summary: Pull to a branch from a remote
      tags:
        - Collaboration
      parameters:
        - $ref: '#/components/parameters/branch_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - remote
                - remote_branch
              properties:
                remote:
                  type: string
                  example: origin
                  description: The name of the remote to push to
                remote_branch:
                  type: string
                  example: main
                  description: The name of the branch on the remote to push
      responses:
        200:
          description: "Pull Response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - "api:PullResponse"
                  "api:status":
                    type: string
                    enum:
                      - "api:success"
  /remote/{path}:
    post:
      x-python-client: not_implemented
      x-js-client: not_implemented
      summary: Create a new remote
      tags:
        - Collaboration
      parameters:
        - $ref: '#/components/parameters/branch_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - remote_name
                - remote_location
              properties:
                remote_name:
                  type: string
                  example: origin
                  description: The name of the remote
                remote_location:
                  type: string
                  example: 'http://cloud.terminusdb.com/TerminatorsX/TerminatorsX/nuclear'
                  description: The URI to associate with the remote
      responses:
        200:
          description: "Remote update success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - "api:RemoteResponse"
                  "api:status":
                    type: string
                    enum:
                      - "api:success"
    delete:
      x-python-client: not_implemented
      x-js-client: not_implemented
      summary: Delete a remote
      tags:
        - Collaboration
      parameters:
        - $ref: '#/components/parameters/branch_path'
        - name: remote_name
          in: query
          schema:
            type: string
            example: origin
          description: The name of the remote
      responses:
        200:
          description: "Remote delete success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - "api:RemoteResponse"
                  "api:status":
                    type: string
                    enum:
                      - "api:success"
    put:
      x-python-client: not_implemented
      x-js-client: not_implemented
      summary: Update a remote with a new location
      tags:
        - Collaboration
      parameters:
        - $ref: '#/components/parameters/branch_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - remote_name
                - remote_location
              properties:
                remote_name:
                  type: string
                  example: origin
                  description: The name of the remote
                remote_location:
                  type: string
                  example: 'http://cloud.terminusdb.com/TerminatorsX/TerminatorsX/nuclear'
                  description: The URI to associate with the remote
      responses:
        200:
          description: "Remote update success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - "api:RemoteResponse"
                  "api:status":
                    type: string
                    enum:
                      - "api:success"
    get:
      x-python-client: not_implemented
      x-js-client: not_implemented
      summary: Get the url for a given remote
      tags:
        - Collaboration
      parameters:
        - $ref: '#/components/parameters/branch_path'
        - name: remote_name
          in: query
          schema:
            type: string
            example: origin
      responses:
        200:
          description: "Remote delete success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - "api:RemoteResponse"
                  "api:remote_name":
                    type: string
                    example: origin
                  "api:remote_url":
                    type: string
                    example: 'http://cloud.terminusdb.com/TerminatorsX/TerminatorsX/nuclear'
                  "api:status":
                    type: string
                    enum:
                      - "api:success"
  /branch/{path}:
    post:
      summary: Create a new branch
      x-python-client: Client::create_branch
      x-js-client: Client.branch
      tags:
        - Branches
      parameters:
        - $ref: '#/components/parameters/branch_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          description: "Branch succesfully added"
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type:":
                    type: string
                    enum:
                      - "api:BranchResponse"
                  "api:status":
                    type: string
                    enum:
                      - "api:success"
    delete:
      summary: Delete a branch
      x-python-client: Client::delete_branch
      x-js-client: Client.deleteBranch
      tags:
        - Branches
      parameters:
        - $ref: '#/components/parameters/branch_path'
      responses:
        200:
          description: "Branch succesfully deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type:":
                    type: string
                    enum:
                      - "api:BranchResponse"
                  "api:status":
                    type: string
                    enum:
                      - "api:success"

  /squash/{path}:
    x-python-client: Client::squash
    x-js-client: Client.squashBranch
    parameters:
        - $ref: '#/components/parameters/commit_path'
    post:
      summary: Squash a commit history into a new commit
      description: This squashes a commit history into a single commit. The commit will not be attached to any particular branch.
      tags:
        - Branches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "commit_info"
              properties:
                "commit_info":
                  $ref: "#/components/schemas/CommitInfo"
      responses:
        200:
          description: "Succesfully created a new unattached commit containing the squashed data. This commit can be queried directly, or be assigned to a particular branch using the reset endpoint."
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - "api:SquashResponse"
                  "api:commit":
                    type: string
                    description: the newly generated commit
                    example: admin/test/local/commit/apgatilsa03g4lsa9ra5698wom5wcv7
                  "api:old_commit":
                    type: string
                    description: the commit that was squashed
                    example: admin/test/local/commit/5jndjh9lexe62q9u1q2vofyjemfnmyt
                  "api:status":
                    type: string
                    enum:
                    - api:success
  /reset/{path}:
    parameters:
      - $ref: '#/components/parameters/branch_path'
    post:
      summary: Reset branch to a specific commit
      description: This will set the branch to the submitted commit. The commit is specified as a resource path to either a specific commit, or to a branch, in which case the commit this branch will be set to is going to be the head of that branch.
      x-python-client: Client::reset
      x-js-client: Client.resetBranch
      tags:
        - Branches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commit_descriptor:
                  type: string
                  description: path to a specific commit or to a branch
                  example: admin/test/local/commit/5jndjh9lexe62q9u1q2vofyjemfnmyt
      responses:
        200:
          description: "Succesfully reset branch HEAD to commit_descriptor"
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - api:ResetResponse
                  "api:status":
                    type: string
                    enum:
                      - api:success
  /rebase/{path}:
    parameters:
      - $ref: '#/components/parameters/branch_path'
    post:
      summary: Rebase all commits from a source onto this branch
      description: Given a submitted commit ref (either a branch path or a commit path), this will find out the most recent common commit, and starting at that common commit, reapply commits from the source, followed by the commits from this branch. The end result is a history where all changes unique to this branch are now at the top of the history.

        If there is no common history, the rebase will take all commits into account.
      x-python-client: Client::rebase
      x-js-client: Client.rebase
      tags:
        - Branches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author:
                  type: string
                  example: Lightning McQueen
                rebase_from:
                  type: string
                  example: admin/test/local/branch/bar
      responses:
        200:
          description: "Succesfully rebased commits"
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - api:RebaseResponse
                  "api:forwarded_commits":
                    type: array
                    items:
                      type: string
                    description: the list of ids that are taken from source
                    example:
                      - q0r08e1hjy123tkf0urzjiov7rrnmp7
                      - 71oqhojpu24a1doftlo9szjkmf22yhy
                  "api:rebase_report":
                    description: a report for each rebased commit on how it was reapplied
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          enum:
                            - api:RebaseReport
                        "api:origin_commit":
                          type: string
                          description: the original commit ID
                        "api:applied":
                          type: array
                          items:
                            type: string
                          description: the new commit IDs this commit turned into
                        "api:commit_type":
                          type: string
                          enum:
                            - api:valid_commit
                    example:
                      - '@type': api:RebaseReport
                        api:applied:
                          - 1q7oa1tq79w2hbn21b6bp7gojryqdes
                        api:commit_type: api:valid_commit
                        api:origin_commit: wguh7angj0wyc7zmolzf8r9p80s6wz6
                      - '@type': api:RebaseReport
                        api:applied:
                          - i2e1wv5pagftoguf70yrk66ufogrejf
                        api:commit_type: api:valid_commit
                        api:origin_commit: w1akvg7nvbzgkqj4ycugftk9g1d1ydy
                      - '@type': api:RebaseReport
                        api:applied:
                          - ams38vxkl0yphl9ni0hgkb4802arm3s
                        api:commit_type: api:valid_commit
                        api:origin_commit: opk0hv1qk6j0q7auaexlkisd6mf28s9
                  "api:common_commit_id":
                    type: string
                    example: h9m7xx0c4lyhpp6kf728yfcotyxmodn
                  "api:status":
                    type: string
                    enum:
                      - api:success
  /optimize/{path}:
    post:
      summary: Optimize a specific graph
      x-python-client: Client::optimize
      x-js-client: Client.optimizeBranch
      tags:
        - Optimize
      parameters:
        - name: path
          description: Database Path
          in: path
          required: true
          schema:
            type: string
            example: _system
      responses:
        200:
          description: Succesfully optimized resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - api:OptimizeResponse
                  "api:status":
                    type: string
                    enum:
                      - api:success
  /prefixes/{path}:
    get:
      summary: Get prefixes
      x-python-client: Client::_get_prefixes
      x-js-client: Client.getPrefixes
      tags:
        - Prefixes
      parameters:
        - name: path
          description: Database Path
          in: path
          required: true
          schema:
            type: string
            example: _system
      responses:
        200:
          description: "Succesfully fetched prefixes of graph"
          content:
            application/json:
              schema:
                type: object
  /diff:
    post:
      summary: Diff a specific object or data version
      x-python-client: Client::diff
      x-js-client: Client.getVersionDiff, Client.getVersionObjectDiff
      tags:
        - Change management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                "before":
                  type: object
                  example: { "@id" : "Person/Jane", "@type" : "Person", "name" : "Jane"}
                "after":
                  type: object
                  example: { "@id" : "Person/Jane", "@type" : "Person", "name" : "Jannet"}
                "before_data_version":
                  type: string
                  example: ow5ysf361fc2o6qf3aqn7twuuhbzi1
                "after_data_version":
                  type: string
                  example: sxs3t5ua25yydnn5scfcr32uy4m19wt
                "document_id":
                  type: string
                  example: Person/Jane
                "start":
                  type: integer
                  example: 0
                "count":
                  type: integer
                  example: 10
                "keep":
                  type: object
                  example: { "@id" : true, "_id" : true }
      responses:
        200:
          description: "Successful Diff"
          content:
            application/json:
              schema:
                type: object
                example: { "name" : { "@op" : "ValueSwap", "@before" : "Jane", "@after": "Janine" }}

        404:
          description: "Failed to find diff"

  /patch:
    post:
      summary: Apply a patch object to another object
      x-python-client: Client::patch
      x-js-client: Client.patch
      tags:
        - Change management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                "before":
                  type: object
                  example: { "@id" : "Person/Jane", "@type" : "Person", "name" : "Jane"}
                "patch":
                  type: object
                  example: { "name" : { "@op" : "ValueSwap", "@before" : "Jane", "@after": "Janine" }}
      responses:
        200:
          description: "Successful Patch"
          content:
            application/json:
              schema:
                type: object
                example: { "@id" : "Person/Jane", "@type" : "Person", "name" : "Jannet"}
        404:
          description: "Failed to apply patch: returning conflict patch"
          content:
            application/json:
              schema:
                type: object
                example: { "name" : { "@op" : "ValueSwap", "@before" : "Doug", "@after": "Jane" }}
  /patch/{path}:
    parameters:
      - $ref: '#/components/parameters/branch_path'
    post:
      summary: Apply a patch object to a resource
      x-python-client: Client::patch_resource
      x-js-client: Client.patchResource
      tags:
        - Change management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - "patch"
                - "author"
                - "message"
              properties:
                "patch":
                  type: object
                  example:
                    - '@id': Obj/id1
                      name:
                        '@op': SwapValue
                        '@before': foo
                        '@after': bar
                    - '@id': Obj/id2
                      name:
                        '@op': SwapValue
                        '@before': foo
                        '@after': bar
                "author": 
                  type: string
                  example: me
                "message": 
                  type: string
                  example: message
      responses:
        200:
          description: "Patch applied cleanly"
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: string
                example: ["Obj/id1", "Obj/id2"]
        409:
          description: "Failed to apply patch: returning conflict patch"
          content:
            application/json:
              schema:
                type: object
                example: { "@type" : "api:PatchError", "api:status" : "api:conflict", "api:witnesses" : [{"@op" : "InsertConflict", "@id_already_exists" : "Person/Jane"}]}
  /apply/{path}:
    parameters:
      - $ref: '#/components/parameters/branch_path'
    post:
      summary: Apply a specific diff
      x-python-client: Client::apply
      x-js-client: Client.apply
      tags:
        - Change management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "before_commit"
                - "after_commit"
                - "commit_info"
              properties:
                "before_commit":
                  type: object
                  example: { "@id" : "Person/Jane", "@type" : "Person", "name" : "Jane"}
                "after_commit":
                  type: object
                  example: { "name" : { "@op" : "ValueSwap", "@before" : "Jane", "@after": "Janine" }}
                "commit_info":
                  $ref: "#/components/schemas/CommitInfo"
                "match_final_state":
                  type: boolean
                  default: false
                "keep":
                  type: object
                  example: { "@id" : true, "_id" : true }
      responses:
        200:
          description: "Successful Patch Application"
          content:
            application/json:
              schema:
                type: object
                example: {"@type" : "api:ApplyResponse", "api:status" : "api:success" }
        409:
          description: "Failed to apply patch: returning conflict patch"
          content:
            application/json:
              schema:
                type: object
                example: { "@type" : "api:ApplyError", "api:status" : "api:conflict", "api:witnesses" : [{"@op" : "InsertConflict", "@id_already_exists" : "Person/Jane"}]}
  /log/{organization}/{database}:
    get:
      x-python-client: Client::log
      x-js-client: not_implemented
      summary: "Get commits from a specific database or branch"
      tags:
        - Change management
      parameters:
        - $ref: '#/components/parameters/organization'
        - $ref: '#/components/parameters/database'
        - name: start
          description: Index to start from
          in: query
          required: false
          schema:
            type: integer
            example: 0
        - name: count
          description: Amount of commits to show
          in: query
          required: false
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: "Successful log request"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    "@id":
                      type: string
                      example: InitialCommit/hpl18q42dbnab4vzq8me4bg1xn8p2a0
                    "@type":
                      type: string
                      example: InitialCommit
                    "author":
                      type: string
                      example: admin
                    "identifier":
                      type: string
                      example: hpl18q42dbnab4vzq8me4bg1xn8p2a0
                    "message":
                      type: string
                      example: create initial schema
                    "schema":
                      type: string
                      example: layer_data:Layer_4234adfe377fa9563a17ad764ac37f5dcb14de13668ea725ef0748248229a91b
                    "timestamp":
                      type: number
                      example: 1660919664.9129035
                  example: {"@type" : "api:ApplyResponse", "api:status" : "api:success" }
  /history/{organization}/{database}:
    get:
      x-python-client: not_implemented
      x-js-client: not_implemented
      summary: "Get commits from a specific database or branch"
      tags:
        - Change management
      parameters:
        - $ref: '#/components/parameters/organization'
        - $ref: '#/components/parameters/database'
        - name: id
          description: id of document to report histry of
          in: query
          required: true
          schema:
            type: string
            example: "A/0"
        - name: start
          description: Index to start from
          in: query
          required: false
          schema:
            type: integer
            example: 0
        - name: updated
          description: Last updated time (excludes history, but can be combined with created)
          in: query
          required: false
          schema:
            type: boolean
        - name: created
          description: Created date of object (excludes history, but can be combined with updated)
          in: query
          required: false
          schema:
            type: boolean
        - name: count
          description: Amount of commits to show
          in: query
          required: false
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: "Successful history request"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    "author":
                      type: string
                      example: admin
                    "identifier":
                      type: string
                      example: hpl18q42dbnab4vzq8me4bg1xn8p2a0
                    "message":
                      type: string
                      example: create initial schema
                    "timestamp":
                      type: number
                      example: 1660919664.9129035
                  example: [{"author":"admin","identifier":"tbn15yq6rw1l4e9bgboyu3vwcoxgri5","message":"cli: document replace","timestamp":1680808874.324928},{"author":"admin","identifier":"3v3naa8jrt8612dg5zryu4vjqwa2w9s","message":"cli: document insert","timestamp":1680808847.4063878}]
  /roles:
    post:
      x-python-client: Client::add_role
      x-js-client: AccessControl.createRole
      tags:
        - Account management
      summary: Adding a new role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "name"
                - "action"
              properties:
                "name":
                  type: string
                  example: 'Grand Pubah'
                "action":
                  type: array
                  items:
                    type: string
                    example: "branch"
                  example: ["branch","class_frame","clone","commit_read_access","commit_write_access","create_database","delete_database","fetch","instance_read_access","instance_write_access","manage_capabilities","meta_read_access","meta_write_access","push","rebase","schema_read_access","schema_write_access"]
      responses:
        200:
          description: "Successfully added role"
          content:
            application/json:
              schema:
                type: string
                example: "Role/Grand%20Pubah"
        403:
          description: Forbidden
        400:
          description: Bad Request
    put:
      x-python-client: Client::change_role
      x-js-client: not_implemented
      tags:
        - Account management
      summary: Changing actions for a role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "name"
                - "action"
              properties:
                "name":
                  type: string
                  example: 'Grand Pubah'
                "action":
                  type: array
                  items:
                    type: string
                    example: "branch"
                  example: ["branch","class_frame","clone","commit_read_access","commit_write_access","create_database","delete_database","fetch","instance_read_access","instance_write_access","manage_capabilities","meta_read_access","meta_write_access","push","rebase","schema_read_access","schema_write_access"]
      responses:
        200:
          description: "Successfully updated role"
          content:
            application/json:
              schema:
                type: object
                example: {"@type" : "api:RolesResponse", "api:status" : "api:success"}
        404:
          description: Not Found
        403:
          description: Forbidden
        400:
          description: Bad Request
    get:
      x-python-client: Client::get_available_roles
      x-js-client: AccessControl.getAccessRoles
      tags:
        - Account management
      summary: Get all roles available with the current authority
      responses:
        200:
          description: "Listing of all roles"
          content:
            application/json:
              schema:
                type: object
                example: [{"@id":"Role/admin","@type":"Role","action":["branch","class_frame","clone","commit_read_access","commit_write_access","create_database","delete_database","fetch","instance_read_access","instance_write_access","manage_capabilities","meta_read_access","meta_write_access","push","rebase","schema_read_access","schema_write_access"],"name":"Admin Role"},{"@id":"Role/consumer","@type":"Role","action":["class_frame","instance_read_access","schema_read_access"],"name":"ConsumerRole"}]
  /roles/{roleName}:
    delete:
      x-python-client: not_implemented
      x-js-client: AccessControl.deleteRole
      summary: Delete a role
      tags:
        - Account management
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
            example: Editor
      responses:
        200:
          description: "Successfully deleted role"
          content:
            application/json:
              schema:
                type: object
                example: {"@type" : "api:RolesResponse", "api:status" : "api:success"}
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                example: {"@type":"api:RoleErrorResponse","api:error": {"@type":"api:DocumentNotFound", "api:document_id":"Role/Garbage"},"api:message":"Document not found: 'Role/Editor'","api:status":"api:not_found"}
    get:
      x-python-client: not_implemented
      x-js-client: not_implemented
      tags:
        - Account management
      summary: Get the role object by role name
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
            example: Consumer Role
      responses:
        200:
          description: "Successfully aquired role"
          content:
            application/json:
              schema:
                type: object
                example: {"@id":"Role/consumer","@type":"Role","action": ["class_frame", "instance_read_access", "schema_read_access" ],"name":"Consumer Role"}
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                example: {"@type":"api:RoleErrorResponse","api:error": {"@type":"api:DocumentNotFound", "api:document_id":"Role/Garbage"},"api:message":"Document not found: 'Role/Editor'","api:status":"api:not_found"}
  /organizations:
    get:
      x-python-client: Client::get_organizations
      x-js-client: AccessControl.getAllOrganizations
      tags:
        - Account management
      summary: Get all organizations according to the capabilities of the user
      responses:
        200:
          description: Succesful listing of organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example: [{"@id":"Organization/admin","@type":"Organization","database": ["SystemDatabase/system",  "UserDatabase/326f41af8c9499b0eea69b67fdced3efbd31663ca601dee8c50d3ad3393b367d","UserDatabase/462333349c1a8271aca185a3bd2d601057fdf2584a88687ad55e43cab635da48","UserDatabase/b4e01001e90bd368f8f19640426f346970f5ceb8eb02acaa42c759f3758e1901","UserDatabase/f5a0ef94469b32e1aee321678436c7dfd5a96d9c476672b3282ae89a45b5200e"],"name":"admin"}]
  /organizations/{organizationName}:
    parameters:
      - name: organizationName
        in: path
        required: true
        schema:
          type: string
          example: admin
    get:
      x-python-client: Client::get_organization
      x-js-client: not_implemented
      tags:
        - Account management
      summary: Get the organization object by name
      responses:
        200:
          description: "Successfully aquired organization"
          content:
            application/json:
              schema:
                type: object
                example: {"@id":"Organization/admin","@type":"Organization","database": ["SystemDatabase/system",  "UserDatabase/326f41af8c9499b0eea69b67fdced3efbd31663ca601dee8c50d3ad3393b367d","UserDatabase/462333349c1a8271aca185a3bd2d601057fdf2584a88687ad55e43cab635da48","UserDatabase/b4e01001e90bd368f8f19640426f346970f5ceb8eb02acaa42c759f3758e1901","UserDatabase/f5a0ef94469b32e1aee321678436c7dfd5a96d9c476672b3282ae89a45b5200e"],"name":"admin"}
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                example: {"@type":"api:OrganizationErrorResponse","api:error":{"@type":"api:NoIdForOrganizationName","api:organization_name":"Garbage"},"api:message":"There is no organization with the name adsdfmin.","api:status":"api:not_found"}
        403:
          description: Forbidden
    post:
      x-python-client: Client::create_organization
      x-js-client: AccessControl.createOrganization
      tags:
        - Account management
      summary: Add an organization with the given name
      responses:
        200:
          description: "Successfully added organization"
          content:
            application/json:
              schema:
                type: string
                example: terminusdb://system/data/Organization/admin
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                example: {"@type":"api:OrganizationErrorResponse","api:error": {"@type":"api:NoUniqueIdForOrganizationName","api:organization_id":"terminusdb://system/data/Organization/admin"},"api:message":"An organization with the id 'terminusdb://system/data/Organization/admin' already exists.  Consider renaming, deleting the old role, or updating the old role.","api:status":"api:failure"}
    delete:
      x-python-client: Client::delete_organization
      x-js-client: AccessControl.deleteOrganization
      tags:
        - Account management
      summary: Delete the organization of the given name
      responses:
        200:
          description: "Successfully deleted organization"
          content:
            application/json:
              schema:
                type: object
                example: {'@type':"api:OrganizationResponse",'api:status':"api:success"}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                example: {"@type":"api:OrganizationErrorResponse","api:error": {"@type":"api:NoUniqueIdForOrganizationName","api:organization_id":"terminusdb://system/data/Organization/admin"},"api:message":"An organization with the id 'terminusdb://system/data/Organization/admin' already exists.  Consider renaming, deleting the old role, or updating the old role.","api:status":"api:failure"}
  /organizations/{organizationName}/users:
    parameters:
      - name: organizationName
        in: path
        required: true
        schema:
          type: string
          example: admin
    get:
      x-python-client: Client::get_organization_users
      x-js-client: AccessControl.getOrgUsers
      tags:
        - Account management
      summary: Get all available users according to capabilities within an organization
      responses:
        200:
          description: "Successfully listing users in organization"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: Users with their capabilities
                example: [{"@id":"User/admin","capability":[{"@id":"Capability/server_access","@type":"Capability","role":[{"@id":"Role/admin","@type":"Role","action":["branch","class_frame","clone","commit_read_access","commit_write_access","create_database","delete_database","fetch","instance_read_access","instance_write_access","manage_capabilities","meta_read_access","meta_write_access","push","rebase","schema_read_access","schema_write_access"],"name":"AdminRole"}],"scope":"Organization/admin"}],"name":"admin"}]
        403:
          description: Forbidden
        400:
          description: Bad Request
  /organizations/{organizationName}/users/{userName}:
    get:
      x-python-client: Client::get_organization_user
      x-js-client: not_implemented
      tags:
        - Account management
      summary: Get a user record for a given organization
      parameters:
        - name: organizationName
          in: path
          required: true
          schema:
            type: string
            example: admin
        - name: userName
          in: path
          required: true
          schema:
            type: string
            example: admin
      responses:
        200:
          description: "Successfully listing users in organization"
          content:
            application/json:
              schema:
                type: object
                example: {"@id":"User/admin","capability":[{"@id":"Capability/server_access","@type":"Capability","role":[{"@id":"Role/admin","@type":"Role","action":["branch","class_frame","clone","commit_read_access","commit_write_access","create_database","delete_database","fetch","instance_read_access","instance_write_access","manage_capabilities","meta_read_access","meta_write_access","push","rebase","schema_read_access","schema_write_access"],"name":"AdminRole"}],"scope":"Organization/admin"}],"name":"admin"}
        403:
          description: Forbidden
        400:
          description: Bad Request
  /organizations/{organizationName}/users/{userName}/databases:
    get:
      x-python-client: Client::get_organization_user_databases
      x-js-client: not_implemented
      tags:
        - Account management
      summary: Get the databases available to a user which are inside an organization
      parameters:
        - name: organizationName
          in: path
          required: true
          schema:
            type: string
            example: admin
        - name: userName
          in: path
          required: true
          schema:
            type: string
            example: admin
      responses:
        200:
          description: "Successfully listing users in organization"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  example: {"@id":"SystemDatabase/system","@type":"SystemDatabase","name":"_system"}
                example: [{"@id":"SystemDatabase/system","@type":"SystemDatabase","name":"_system"}]
        403:
          description: Forbidden
        400:
          description: Bad Request
  /users:
    get:
      x-python-client: Client::get_users
      x-js-client: AccessControl.getAllUsers
      tags:
        - Account Management
      summary: Get all users
      parameters:
        - name: capability
          in: query
          description: Get capabilities for the listed users
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Success at listing users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  example: {"@id":"User/admin","@type":"User","capability":["Capability/server_access"],"name":"admin"}
        403:
          description: Forbidden
    put:
      x-python-client: Client::change_user_password
      x-js-client: not_implemented
      tags:
        - Account management
      summary: Update a user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "name"
                - "password"
              properties:
                "name":
                  type: string
                  example: 'Jim'
                "password":
                  type: string
                  example: "Very secret"
      responses:
        200:
          description: "Successfully updated user"
          content:
            application/json:
              schema:
                type: object
                example: {"@type":"api:UsersResponse","api:status":"api:success"}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
    post:
      x-python-client: Client::add_user
      x-js-client: AccessControl.createUser
      tags:
        - Account management
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "name"
              properties:
                "name":
                  type: string
                  example: 'Jim'
                "password":
                  type: string
                  example: "Very secret"
      responses:
        200:
          description: "Successfully added user"
          content:
            application/json:
              schema:
                type: object
                example: {"@type":"api:UsersResponse","api:status":"api:success"}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
  /users/{userName}:
    parameters:
      - name: userName
        in: path
        required: true
        schema:
          type: string
          example: Bob
    get:
      x-python-client: Client::get_user
      x-js-client: not_implemented
      tags:
        - Account Management
      summary: Get a user by name
      parameters:
        - name: capability
          in: query
          description: Get capabilities for the given user
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Success at acquiring user record
          content:
            application/json:
              schema:
                type: object
                example: {"@id":"User/admin","@type":"User","capability":["Capability/server_access"],"name":"admin"}
        403:
          description: Forbidden
    delete:
      x-python-client: Client::delete_user
      x-js-client: AccessControl.deleteUser
      tags:
        - Account Management
      summary: Delete a user
      responses:
        200:
          description: Success at deleting a user
          content:
            application/json:
              schema:
                type: object
                example: {'@type':"api:UsersResponse",'api:status' :"api:success"}
        403:
          description: Forbidden
  /migration/{path}:
    parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
          example: admin/MyDB
    post:
      tags:
        - Change management
      summary: Schema migration either by explicit operation, or implicit schema targetting
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                "author":
                  type: string
                  example: "Jimbo"
                "message":
                  type: string
                  example: "updating schema"
                "operations":
                  type: object
                  example: [{"@type" : "DeleteClassProperty", "class" : "MyClass", "property" : "my_property"}]
                "dry_run":
                  type: boolean
                  example: true
                "verbose":
                  type: boolean
                  example: true
                "target":
                  type: string
                  example: "admin/foo"
      responses:
        200:
          description: "Successfully migrated schema"
          content:
            application/json:
              schema:
                type: object
                example: {"@type":"api:MigrationResponse","api:status":"api:success"}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
  /capabilities:
    post:
      x-python-client: Client::change_capabilities
      x-js-client: AccessControl.manageCapability
      tags:
        - Account management
      summary: Grant or remove capabilities over a resource to a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "operation"
                - "scope"
                - "user"
                - "roles"
              properties:
                "operation":
                  type: string
                  enum:
                    - "revoke"
                    - "grant"
                "scope":
                  type: string
                  example: "UserDatabase/f5a0ef94469b32e1aee321678436c7dfd5a96d9c476672b3282ae89a45b5200e"
                "scope_type":
                  type: string
                  enum:
                    - "organization"
                    - "database"
                "user":
                  type: string
                  example: "User/admin"
                "roles":
                  type: array
                  items:
                    type: string
                    example: "Role/consumer"
                  example: ["Role/consumer", "Role/admin"]
      responses:
        200:
          description: "Successfully granted or revoked roles"
          content:
            application/json:
              schema:
                type: object
                example: {"@type":"api:CapabilityResponse","api:status":"api:success"}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object

components:

  parameters:
    graph_type:
      name: graph_type
      in: query
      description: Type of the graph
      required: false
      schema:
        type: string
        default: instance
        enum:
          - instance
          - schema
    author:
      name: author
      in: query
      description: Author of commit
      required: true
      schema:
        type: string
        example: Jan
    message:
      name: message
      in: query
      description: Commit message
      required: true
      schema:
        type: string
        example: Fixed bad name for document
    branch_path:
      name: path
      in: path
      description: Path for branch
      required: true
      schema:
        type: string
        example: admin/test/local/branch/foo
    commit_path:
      name: path
      in: path
      description: Path for a commit or branch
      required: true
      schema:
        type: string
      examples:
        branch:
          value: admin/test/local/branch/foo
        commit:
          value: admin/test/local/commit/q0r08e1hjy123tkf0urzjiov7rrnmp7
    resource_path:
      name: path
      in: path
      description: Path for a resource (a branch, a commit, one of the metadata graphs, or the _system graph)
      required: true
      schema:
        type: string
      examples:
        default_branch:
          value: admin/foo
          summary: branch 'main' of admin/foo (autocompleted to admin/foo/local/branch/main)
        branch:
          value: admin/foo/local/branch/bar
          summary: branch 'bar' of data product 'admin/foo'
        remote_branch:
          value: admin/foo/upstream/branch/bar
          summary: branch 'bar' of the data product 'admin/foo' as it is in the 'upstream' remote
        commit:
          value: admin/foo/local/commit/66smtj9j45bho1vpztzwpi4fbbj8bwa
          summary: a specific commit in data product 'admin/foo'
        local_commits:
          value: admin/foo/local/_commits
          summary: the local commit graph for data product 'admin/foo'
        remote_commits:
          value: admin/foo/upstream/_commits
          summary: the commit graph that of the 'upstream' remote for data product 'admin/foo'
        meta:
          value: admin/foo/_meta
          summary: the metadata graph of data product 'admin/foo'
        system:
          value: _system
          summary: the system graph
    organization:
      name: organization
      in: path
      description: Organization for the database
      required: true
      schema:
        type: string
        example: admin
    database:
      name: database
      in: path
      description: Database name
      required: true
      schema:
        type: string
        example: MyNewDatabase
  schemas:
    WoqlQuery:
      type: object
      properties:
        "query":
          type: object
          # TODO: Nice example of a WOQL Query
          description: WOQL Query
        "commit_info":
          $ref: "#/components/schemas/CommitInfo"
        "optimize":
          type: boolean
          description: Allow reordering of queries
          default: true
        "all_witnesses":
          type: boolean
          description: Check for all errors
          default: false
    CommitInfo:
      type: object
      properties:
        "author":
          type: string
          example: ExampleUser
        "message":
          type: string
          example: Created something in the data product
    Database:
      type: object
      properties:
        '@id':
          type: string
          example: UserDatabase/MyUserDatabase3315d1a3bb196e322e40bc53ac
        '@type':
          type: string
          example: UserDatabase
        comment:
          type: string
          example: A comment for my database
        creation_date:
          type: string
          example: '2021-12-13T14:27:46.202Z'
        label:
          type: string
          example: MyDatabaseLabel
        name:
          type: string
          example: My Database Name
        state:
          type: string
          example: finalized
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              '@type':
                type: string
                example: api:ErrorResponse
              api:error:
                type: string
              api:message:
                type: string
                example: Incorrect authentication information
              api:status:
                type: string
                example: api:failure
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
